{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nexport default {\n  data() {\n    return {\n      showAdminLogin: false,\n      email: '',\n      otp: ''\n    };\n  },\n  methods: {\n    openAdminLogin() {\n      this.showAdminLogin = true;\n    },\n    async requestOTP() {\n      if (this.email.trim() !== '') {\n        try {\n          // Send a request to check if the email is registered\n          const checkEmailResponse = await axios.post('http://127.0.0.1:5555/checkAdmin', {\n            email: this.email,\n            id: this.id\n          });\n          if (checkEmailResponse.status === 200 && checkEmailResponse.data.isRegistered !== false) {\n            // The email is registered, proceed to generate OTP\n\n            console.log(checkEmailResponse.data);\n            const otpResponse = await axios.post('http://127.0.0.1:5555/generateOtp', {\n              email: this.email\n            });\n            if (otpResponse.status === 200) {\n              console.log('OTP Sent Successfully');\n              Swal.fire({\n                title: 'Success!',\n                text: 'OTP Sent Successfully',\n                icon: 'success',\n                confirmButtonText: 'OK'\n              });\n            } else {\n              console.error('OTP request failed:', otpResponse.data.error);\n              Swal.fire({\n                title: 'Error!',\n                text: 'User Not found',\n                icon: 'error',\n                confirmButtonText: 'OK'\n              });\n            }\n          } else {\n            console.error('Email is not registered');\n            Swal.fire({\n              title: 'Error!',\n              text: 'Email is not registered',\n              icon: 'error',\n              confirmButtonText: 'OK'\n            });\n          }\n        } catch (error) {\n          console.error('Error:', error);\n          Swal.fire({\n            title: 'Error!',\n            text: 'An error occurred while checking email or requesting OTP. Please try again later.',\n            icon: 'error',\n            confirmButtonText: 'OK'\n          });\n        }\n      } else {\n        alert('Please enter an email address.');\n      }\n    },\n    async verifyOTP() {\n      if (this.email.trim() !== '' && this.otp.trim() !== '') {\n        try {\n          // Send a request to your server to verify OTP\n          const response = await axios.post('http://127.0.0.1:5555/verifyOtp', {\n            email: this.email,\n            otp: this.otp\n          });\n          if (response.status === 200) {\n            console.log('OTP Verified Successfully');\n            alert('OTP Verified Successfully');\n            // You can now consider the user as log\n            this.$router.push('/admin');\n          } else {\n            //console.error('OTP verification failed:', response.data.error);\n            alert('OTP verification failed. Please try again.');\n          }\n        } catch (error) {\n          console.error('Error:', error);\n          alert('An error occurred during OTP verification. Please try again later.');\n        }\n      } else {\n        alert('Please enter both email and OTP.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","Swal","data","showAdminLogin","email","otp","methods","openAdminLogin","requestOTP","trim","checkEmailResponse","post","id","status","isRegistered","console","log","otpResponse","fire","title","text","icon","confirmButtonText","error","alert","verifyOTP","response","$router","push"],"sources":["C:\\Users\\Harsh\\Downloads\\NEW\\form-system-user-main\\src\\components\\AdminLogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-login-modal\">\r\n    <div class=\"admin-login-content\">\r\n      <h2>Admin Login</h2>\r\n      <input type=\"text\" v-model=\"email\" placeholder=\"Email Address\" />\r\n      <button @click=\"requestOTP\">Get OTP</button>\r\n      <input type=\"text\" v-model=\"otp\" placeholder=\"Enter OTP\" />\r\n      <button @click=\"verifyOTP\">Login</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      showAdminLogin: false,\r\n      email: '',\r\n      otp: '',\r\n    };\r\n  },\r\n  methods: {\r\n    openAdminLogin() {\r\n      this.showAdminLogin = true;\r\n    },\r\n\r\n    async requestOTP() {\r\n      if (this.email.trim() !== '') {\r\n        try {\r\n          // Send a request to check if the email is registered\r\n          const checkEmailResponse = await axios.post('http://127.0.0.1:5555/checkAdmin', {\r\n            email: this.email,\r\n            id: this.id\r\n          });\r\n\r\n          if (checkEmailResponse.status === 200 && checkEmailResponse.data.isRegistered !== false) {\r\n            // The email is registered, proceed to generate OTP\r\n          \r\n            console.log(checkEmailResponse.data)\r\n            const otpResponse = await axios.post('http://127.0.0.1:5555/generateOtp', {\r\n              email: this.email,\r\n            });\r\n\r\n            if (otpResponse.status === 200) {\r\n              console.log('OTP Sent Successfully');\r\n              Swal.fire({\r\n            title: 'Success!',\r\n            text: 'OTP Sent Successfully',\r\n            icon: 'success',\r\n            confirmButtonText: 'OK'\r\n          })             \r\n\r\n            } else {\r\n              console.error('OTP request failed:', otpResponse.data.error);\r\n              Swal.fire({\r\n            title: 'Error!',\r\n            text: 'User Not found',\r\n            icon: 'error',\r\n            confirmButtonText: 'OK'\r\n          })\r\n            }\r\n          } else {\r\n            console.error('Email is not registered');\r\n            Swal.fire({\r\n            title: 'Error!',\r\n            text: 'Email is not registered',\r\n            icon: 'error',\r\n            confirmButtonText: 'OK'\r\n          })\r\n          }\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          \r\n          Swal.fire({\r\n            title: 'Error!',\r\n            text: 'An error occurred while checking email or requesting OTP. Please try again later.',\r\n            icon: 'error',\r\n            confirmButtonText: 'OK'\r\n          })\r\n        }\r\n      } else {\r\n        alert('Please enter an email address.');\r\n      }\r\n    },\r\n    async verifyOTP() {\r\n      if (this.email.trim() !== '' && this.otp.trim() !== '') {\r\n        try {\r\n          // Send a request to your server to verify OTP\r\n          const response = await axios.post('http://127.0.0.1:5555/verifyOtp', {\r\n            email: this.email,\r\n            otp: this.otp,\r\n          });\r\n\r\n          if (response.status === 200) {\r\n            console.log('OTP Verified Successfully');\r\n            alert('OTP Verified Successfully');\r\n            // You can now consider the user as log\r\n            this.$router.push('/admin');\r\n\r\n          } else {\r\n            //console.error('OTP verification failed:', response.data.error);\r\n            alert('OTP verification failed. Please try again.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          alert('An error occurred during OTP verification. Please try again later.');\r\n        }\r\n      } else {\r\n        alert('Please enter both email and OTP.');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.admin-login-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 999; /* Ensure it's above other content */\r\n}\r\n\r\n.admin-login-content {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);\r\n  text-align: center;\r\n  max-width: 400px;\r\n  width: 80%;\r\n}\r\n\r\n.admin-login-content h2 {\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n.admin-login-content input[type=\"text\"],\r\n.admin-login-content input[type=\"password\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin: 10px 0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\n.admin-login-content button {\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n.admin-login-content button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.admin-login-content button:last-child {\r\n  background-color: #ccc;\r\n  color: #333;\r\n  margin-left: 10px;\r\n}\r\n\r\n.admin-login-content button:last-child:hover {\r\n  background-color: #999;\r\n}\r\n\r\n</style>\r\n"],"mappings":";AAaA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,IAAG,MAAO,aAAY;AAE7B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,cAAc,EAAE,KAAK;MACrBC,KAAK,EAAE,EAAE;MACTC,GAAG,EAAE;IACP,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACJ,cAAa,GAAI,IAAI;IAC5B,CAAC;IAED,MAAMK,UAAUA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACJ,KAAK,CAACK,IAAI,CAAC,MAAM,EAAE,EAAE;QAC5B,IAAI;UACF;UACA,MAAMC,kBAAiB,GAAI,MAAMV,KAAK,CAACW,IAAI,CAAC,kCAAkC,EAAE;YAC9EP,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBQ,EAAE,EAAE,IAAI,CAACA;UACX,CAAC,CAAC;UAEF,IAAIF,kBAAkB,CAACG,MAAK,KAAM,GAAE,IAAKH,kBAAkB,CAACR,IAAI,CAACY,YAAW,KAAM,KAAK,EAAE;YACvF;;YAEAC,OAAO,CAACC,GAAG,CAACN,kBAAkB,CAACR,IAAI;YACnC,MAAMe,WAAU,GAAI,MAAMjB,KAAK,CAACW,IAAI,CAAC,mCAAmC,EAAE;cACxEP,KAAK,EAAE,IAAI,CAACA;YACd,CAAC,CAAC;YAEF,IAAIa,WAAW,CAACJ,MAAK,KAAM,GAAG,EAAE;cAC9BE,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;cACpCf,IAAI,CAACiB,IAAI,CAAC;gBACZC,KAAK,EAAE,UAAU;gBACjBC,IAAI,EAAE,uBAAuB;gBAC7BC,IAAI,EAAE,SAAS;gBACfC,iBAAiB,EAAE;cACrB,CAAC;YAEC,OAAO;cACLP,OAAO,CAACQ,KAAK,CAAC,qBAAqB,EAAEN,WAAW,CAACf,IAAI,CAACqB,KAAK,CAAC;cAC5DtB,IAAI,CAACiB,IAAI,CAAC;gBACZC,KAAK,EAAE,QAAQ;gBACfC,IAAI,EAAE,gBAAgB;gBACtBC,IAAI,EAAE,OAAO;gBACbC,iBAAiB,EAAE;cACrB,CAAC;YACC;UACF,OAAO;YACLP,OAAO,CAACQ,KAAK,CAAC,yBAAyB,CAAC;YACxCtB,IAAI,CAACiB,IAAI,CAAC;cACVC,KAAK,EAAE,QAAQ;cACfC,IAAI,EAAE,yBAAyB;cAC/BC,IAAI,EAAE,OAAO;cACbC,iBAAiB,EAAE;YACrB,CAAC;UACD;QACF,EAAE,OAAOC,KAAK,EAAE;UACdR,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;UAE9BtB,IAAI,CAACiB,IAAI,CAAC;YACRC,KAAK,EAAE,QAAQ;YACfC,IAAI,EAAE,mFAAmF;YACzFC,IAAI,EAAE,OAAO;YACbC,iBAAiB,EAAE;UACrB,CAAC;QACH;MACF,OAAO;QACLE,KAAK,CAAC,gCAAgC,CAAC;MACzC;IACF,CAAC;IACD,MAAMC,SAASA,CAAA,EAAG;MAChB,IAAI,IAAI,CAACrB,KAAK,CAACK,IAAI,CAAC,MAAM,EAAC,IAAK,IAAI,CAACJ,GAAG,CAACI,IAAI,CAAC,MAAM,EAAE,EAAE;QACtD,IAAI;UACF;UACA,MAAMiB,QAAO,GAAI,MAAM1B,KAAK,CAACW,IAAI,CAAC,iCAAiC,EAAE;YACnEP,KAAK,EAAE,IAAI,CAACA,KAAK;YACjBC,GAAG,EAAE,IAAI,CAACA;UACZ,CAAC,CAAC;UAEF,IAAIqB,QAAQ,CAACb,MAAK,KAAM,GAAG,EAAE;YAC3BE,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;YACxCQ,KAAK,CAAC,2BAA2B,CAAC;YAClC;YACA,IAAI,CAACG,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;UAE7B,OAAO;YACL;YACAJ,KAAK,CAAC,4CAA4C,CAAC;UACrD;QACF,EAAE,OAAOD,KAAK,EAAE;UACdR,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;UAC9BC,KAAK,CAAC,oEAAoE,CAAC;QAC7E;MACF,OAAO;QACLA,KAAK,CAAC,kCAAkC,CAAC;MAC3C;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}