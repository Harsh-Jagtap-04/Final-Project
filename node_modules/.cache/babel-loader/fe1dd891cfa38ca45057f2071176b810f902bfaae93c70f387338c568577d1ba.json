{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-534adaec\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"admin-login-modal\"\n};\nconst _hoisted_2 = {\n  class: \"admin-login-content\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Admin Login\", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    placeholder: \"Email Address\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.requestOTP && $options.requestOTP(...args))\n  }, \"Get OTP\"), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.otp = $event),\n    placeholder: \"Enter OTP\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.otp]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.verifyOTP && $options.verifyOTP(...args))\n  }, \"Login\")])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","type","$data","email","$event","placeholder","onClick","_cache","args","$options","requestOTP","otp","verifyOTP"],"sources":["C:\\Users\\Harsh\\Downloads\\NEW\\form-system-user-main\\src\\components\\AdminLogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"admin-login-modal\">\r\n    <div class=\"admin-login-content\">\r\n      <h2>Admin Login</h2>\r\n      <input type=\"text\" v-model=\"email\" placeholder=\"Email Address\" />\r\n      <button @click=\"requestOTP\">Get OTP</button>\r\n      <input type=\"text\" v-model=\"otp\" placeholder=\"Enter OTP\" />\r\n      <button @click=\"verifyOTP\">Login</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      showAdminLogin: false,\r\n      email: '',\r\n      otp: '',\r\n    };\r\n  },\r\n  methods: {\r\n    openAdminLogin() {\r\n      this.showAdminLogin = true;\r\n    },\r\n\r\n    async requestOTP() {\r\n      if (this.email.trim() !== '') {\r\n        try {\r\n          // Send a request to check if the email is registered\r\n          const checkEmailResponse = await axios.post('http://127.0.0.1:5555/checkAdminEmail', {\r\n            email: this.email,\r\n\r\n          });\r\n\r\n          if (checkEmailResponse.status === 200 && checkEmailResponse.data.isRegistered !== false) {\r\n            // The email is registered, proceed to generate OTP\r\n          \r\n            console.log(checkEmailResponse.data)\r\n            const otpResponse = await axios.post('http://127.0.0.1:5555/generateOtp', {\r\n              email: this.email,\r\n            });\r\n\r\n            if (otpResponse.status === 200) {\r\n              console.log('OTP Sent Successfully');\r\n              Swal.fire({\r\n            title: 'Success!',\r\n            text: 'OTP Sent Successfully',\r\n            icon: 'success',\r\n            confirmButtonText: 'OK'\r\n          })             \r\n\r\n            } else {\r\n              console.error('OTP request failed:', otpResponse.data.error);\r\n              Swal.fire({\r\n            title: 'Error!',\r\n            text: 'User Not found',\r\n            icon: 'error',\r\n            confirmButtonText: 'OK'\r\n          })\r\n            }\r\n          } else {\r\n            console.error('Email is not registered');\r\n            Swal.fire({\r\n            title: 'Error!',\r\n            text: 'Email is not registered',\r\n            icon: 'error',\r\n            confirmButtonText: 'OK'\r\n          })\r\n          }\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          \r\n          Swal.fire({\r\n            title: 'Error!',\r\n            text: 'An error occurred while checking email or requesting OTP. Please try again later.',\r\n            icon: 'error',\r\n            confirmButtonText: 'OK'\r\n          })\r\n        }\r\n      } else {\r\n        alert('Please enter an email address.');\r\n      }\r\n    },\r\n    async verifyOTP() {\r\n      if (this.email.trim() !== '' && this.otp.trim() !== '') {\r\n        try {\r\n          // Send a request to your server to verify OTP\r\n          const response = await axios.post('http://127.0.0.1:5555/verifyOtp', {\r\n            email: this.email,\r\n            otp: this.otp,\r\n          });\r\n\r\n          if (response.status === 200) {\r\n            console.log('OTP Verified Successfully');\r\n            alert('OTP Verified Successfully');\r\n            // You can now consider the user as log\r\n            this.$router.push('/admin');\r\n\r\n          } else {\r\n            //console.error('OTP verification failed:', response.data.error);\r\n            alert('OTP verification failed. Please try again.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Error:', error);\r\n          alert('An error occurred during OTP verification. Please try again later.');\r\n        }\r\n      } else {\r\n        alert('Please enter both email and OTP.');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.admin-login-modal {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 999; /* Ensure it's above other content */\r\n}\r\n\r\n.admin-login-content {\r\n  background-color: #fff;\r\n  padding: 20px;\r\n  border-radius: 10px;\r\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);\r\n  text-align: center;\r\n  max-width: 400px;\r\n  width: 80%;\r\n}\r\n\r\n.admin-login-content h2 {\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n.admin-login-content input[type=\"text\"],\r\n.admin-login-content input[type=\"password\"] {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin: 10px 0;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\n.admin-login-content button {\r\n  background-color: #007bff;\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 20px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n.admin-login-content button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.admin-login-content button:last-child {\r\n  background-color: #ccc;\r\n  color: #333;\r\n  margin-left: 10px;\r\n}\r\n\r\n.admin-login-content button:last-child:hover {\r\n  background-color: #999;\r\n}\r\n\r\n</style>\r\n"],"mappings":";;;EACOA,KAAK,EAAC;AAAmB;;EACvBA,KAAK,EAAC;AAAqB;gEAC9BC,mBAAA,CAAoB,YAAhB,aAAW;;;uBAFnBC,mBAAA,CAQM,OARNC,UAQM,GAPJF,mBAAA,CAMM,OANNG,UAMM,GALJC,UAAoB,E,gBACpBJ,mBAAA,CAAiE;IAA1DK,IAAI,EAAC,MAAM;+DAAUC,KAAA,CAAAC,KAAK,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAAnBH,KAAA,CAAAC,KAAK,E,GACjCP,mBAAA,CAA4C;IAAnCU,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,SAAO,G,gBACnCZ,mBAAA,CAA2D;IAApDK,IAAI,EAAC,MAAM;+DAAUC,KAAA,CAAAS,GAAG,GAAAP,MAAA;IAAEC,WAAW,EAAC;iDAAjBH,KAAA,CAAAS,GAAG,E,GAC/Bf,mBAAA,CAAyC;IAAhCU,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,SAAA,IAAAH,QAAA,CAAAG,SAAA,IAAAJ,IAAA,CAAS;KAAE,OAAK,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}